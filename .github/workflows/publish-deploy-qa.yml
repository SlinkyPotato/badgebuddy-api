#file: noinspection YAMLSchemaValidation
name: Deploy Staging
on:
  push:
    branches:
      - release/dev
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  prepare-versions:
    outputs:
      pnpm: ${{ steps.pnpm-version.outputs.prop }}
      node: ${{ steps.node-version.outputs.prop }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Retrieve node version
        id: node-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: 'package.json'
          prop_path: 'engines.node'
      - name: Retrieve pnpm version
        id: pnpm-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: 'package.json'
          prop_path: 'engines.pnpm'
  build-deploy-docker:
    needs: prepare-versions
    environment: staging
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      package: ${{ steps.package-version.outputs.prop }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.prepare-versions.outputs.node }}
      - run: git config user.name "github-action[bot]"
      - run: git config user.email "<>"
      - run: npm install -g pnpm@${{ needs.prepare-versions.outputs.pnpm }}
      - run: pnpm install
      - run: npx standard-version --prerelease
      - run: pnpm build
      - run: pnpm test
      - name: Retrieve package version
        id: package-version
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: 'package.json'
          prop_path: 'version'
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            solidchain/badge-buddy-api:next
            solidchain/badge-buddy-api:${{ steps.package-version.outputs.prop }}
          build-args: |
            NODE_VERSION=${{ needs.prepare-versions.outputs.node }}
            PNPM_VERSION=${{ needs.prepare-versions.outputs.pnpm }}
      - run: git push --follow-tags
  deploy-qa:
    needs:
      - prepare-versions
      - build-deploy-docker
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Transfer compose.yml
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: "compose.yml"
          target: "${{ secrets.APP_PATH_STAGING }}"
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        env:
          DOTENV_KEY: "${{ secrets.DOTENV_KEY_STAGING }}"
          NODE_VERSION: "${{ needs.prepare-versions.outputs.node }}"
          PNPM_VERSION: "${{ needs.prepare-versions.outputs.pnpm }}"
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          envs: DOTENV_KEY,NODE_VERSION,PNPM_VERSION
          script: |
            cd ${{ secrets.APP_PATH_STAGING }}
            docker compose --profile staging pull
            docker compose --profile staging stop
            docker compose --profile staging up --build -d
  create-pr:
    needs:
      - build-deploy-docker
      - deploy-qa
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch
      - run: git pull --tags
      - run: git config user.name "github-action[bot]"
      - run: git config user.email "<>"
      - run: gh pr close release/dev | exit 0
      - run: gh pr create --base main --fill --title "deploy v${{ needs.build-deploy-docker.outputs.package }} to production"
      - run: git checkout dev
      - run: git merge --no-ff release/dev -m "sync branch release/dev v${{ needs.build-deploy-docker.outputs.package }} into dev" | exit 0
      - run: git push

